/*
 * NotesExampleAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.example.controllers;

import android.support.test.InstrumentationRegistry;
import android.support.test.runner.AndroidJUnit4;
import android.test.suitebuilder.annotation.LargeTest;

import static org.junit.Assert.*;

import java.io.*;
import java.util.*;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.example.models.*;
import com.example.exceptions.*;
import com.example.APIHelper;
import com.example.Configuration;
import com.example.testing.TestHelper;
import com.example.controllers.NotesController;
import com.example.controllers.syncwrapper.APICallBackCatcher;

import com.fasterxml.jackson.core.type.TypeReference;

@RunWith(AndroidJUnit4.class)
@LargeTest
public class NotesControllerTest extends ControllerTestBase {
    
    /**
     * Controller instance (for all tests)
     */
    private static NotesController controller;
    
    /**
     * Setup test class
     */
    @BeforeClass
    public static void setUpClass() {
        Configuration.initialize(InstrumentationRegistry.getContext());
        controller = getClient().getNotes();
    }

    /**
     * Tear down test class
     * @throws IOException
     */
    @AfterClass
    public static void tearDownClass() throws IOException {
        controller = null;
    }

    /**
     * Remove the specified note
     * @throws Throwable
     */
    @Test
    public void testNotesById1() throws Throwable {
        // Parameters for the API call
        int id = 2;

        // Set callback and perform API call
        APICallBackCatcher<Object> response = new APICallBackCatcher<Object>();
        controller.setHttpCallBack(httpResponse);
        controller.deleteNotesByIdAsync(id, response);
        response.getResult();

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 204", 
                204, httpResponse.getResponse().getStatusCode());

    }

    /**
     * Retrieve the specified note
     * @throws Throwable
     */
    @Test
    public void testNotesById() throws Throwable {
        // Parameters for the API call
        int id = 2;

        // Set callback and perform API call
        NotesResponse result = null;
        APICallBackCatcher<NotesResponse> response = new APICallBackCatcher<NotesResponse>();
        controller.setHttpCallBack(httpResponse);
        controller.getNotesByIdAsync(id, response);
        result = response.getResult();

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertEquals("Response body does not match exactly",
                "{  \"id\": 2,  \"title\": \"Return sweater\",   \"status\": \"overdue\",  \"dueInDays\": -2}", 
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()));
    }

    /**
     * Create a new note in the collection
     * @throws Throwable
     */
    @Test
    public void testNotes() throws Throwable {
        // Parameters for the API call
        NotesRequest body = APIHelper.deserialize("{ \"title\": \"Return sweater\", \"dueInDays\": -2 }", new TypeReference<NotesRequest>(){});
        XTrackingExampleEnum xTrackingExample = XTrackingExampleEnum.fromString("accounting");

        // Set callback and perform API call
        NotesResponse result = null;
        APICallBackCatcher<NotesResponse> response = new APICallBackCatcher<NotesResponse>();
        controller.setHttpCallBack(httpResponse);
        controller.createNotesAsync(body, xTrackingExample, response);
        result = response.getResult();

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 201", 
                201, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertEquals("Response body does not match exactly",
                "{   \"id\": 2,  \"title\": \"Return sweater\",   \"status\": \"overdue\",  \"dueInDays\": -2}", 
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()));
    }

}
